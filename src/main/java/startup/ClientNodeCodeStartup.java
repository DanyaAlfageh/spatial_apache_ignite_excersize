package startup;

import config.ClientConfigurationFactory;
import model.Point;
import model.PointDistancePair;
import model.Rectangle;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

import org.apache.ignite.Ignite;
import org.apache.ignite.IgniteCache;
import org.apache.ignite.Ignition;
import org.apache.lucene.search.PointInSetQuery;

/** This file was generated by Ignite Web Console (02/11/2021, 12:55) **/
public class ClientNodeCodeStartup {
    /**
     * Start up node with specified configuration.
     * 
     * @param args Command line arguments, none required.
     * @throws Exception If failed.
     **/
	static Rectangle spaceMbr;
	static IgniteCache<Integer, File> fcache;
	static IgniteCache<String, Rectangle> ccache;
	static Ignite ignite;
	static int qCount = 85;
	static int i=0;
	static int key;
	private static Map <String,IgniteCache<Integer, ArrayList<Point>>> cacheMap;
	
	private static File loadFiles(Ignite ignite, String path) {

		fcache = ignite.getOrCreateCache("FileCache");
		File f = new File(path);
		fcache.put(key, f);
		key++;
		return fcache.get(key-1);
		}
	
	static void createCachesFromFile(Ignite ignite) throws IOException {

		 cacheMap = new HashMap <String,IgniteCache<Integer, ArrayList<Point>>>();
		 
		 BufferedReader br = new BufferedReader(new FileReader(fcache.get(0)));
		 ccache = ignite.getOrCreateCache("Rectangles");
		 String line = null;
		 while ((line = br.readLine()) != null) {
			 
		   String[] parts = line.split(",");
		   int next = Integer.parseInt(parts[0]);
		   IgniteCache<Integer, ArrayList<Point>> pcache = ignite.getOrCreateCache("Cache---"+next);
		   cacheMap.put("Cache---"+next, pcache);
		   ccache.put(pcache.getName(), new Rectangle(Double.parseDouble(parts[1]),Double.parseDouble(parts[2]),
				   Double.parseDouble(parts[3]),Double.parseDouble(parts[4])));

		 }
		 br.close();
		 
	}
	public static void insert(Ignite ignite)throws ParseException, NumberFormatException, IOException {
		String line = null;
		for(int i=0;i<qCount;i++) {
			BufferedReader br = new BufferedReader(new FileReader(fcache.get(1)));
			Rectangle rect = ccache.get("Cache---"+i);
			ArrayList<Point> p = new ArrayList<Point>();

			 while ((line = br.readLine()) != null) {
			   String[] parts = line.split(",");
			   double x = Double.parseDouble(parts[1]);
			   double y = Double.parseDouble(parts[2]);
			   Point point = new Point(x,y);
			   if(rect.contains(point)) {
				   p.add(point);
			   	}
			   }
			 ignite.cache("Cache---"+i).put(0, p);
			 br.close();
		}


	}

	@SuppressWarnings("unchecked")
	public static void printCahces(Ignite ignite) {
		int s=0;
		for (int key = 0; key < qCount; key++) {
			 String name = ignite.cache("Cache---"+key).getName();
			 ArrayList<Point> p = ((ArrayList<Point>) ignite.cache(name).get(0));
			 if(p!=null)
				 s=s+p.size(); 
			 System.out.println("" + key + "," +p.size()+"");

			 
		}
		
	}
	
	public static void rangeQuery(Rectangle s, Ignite ignite) throws FileNotFoundException {
		
	   //File file = new File("D:\\RangeQueryOutput.txt");
	      //Instantiating the PrintStream class
	   //PrintStream stream = new PrintStream(file);

		int key=0;
		IgniteCache <String,Rectangle> cache = ignite.cache("Rectangles");
		ArrayList<String> result = new ArrayList<String>();
		boolean found=true;
		while(found&&key<qCount) {
			Rectangle rect = cache.get("Cache---"+key);
			if(rect.isIntersected(s)) {
				result.add("Cache---"+key);
				
			}
			else {
				//found=false;
			}
			key++;
		}

		ArrayList<Point> foundPoints = new ArrayList<Point>();
		for(int i=0; i<result.size();i++) {
			IgniteCache<Integer, ArrayList<Point>> pcache = cacheMap.get(result.get(i));
			ArrayList<Point> points= pcache.get(0);
			for(Point p : points) {
				if(s.contains(p)) {
					foundPoints.add(p);
				}
			}
		}
		for(int i=0; i<result.size();i++) {
		    //System.setOut(stream);
			//System.out.println("Caches: "+result.get(i)+" is in the range.");
		}
		for(int i=0; i<foundPoints.size();i++) {
			//System.out.println("Point: "+foundPoints.get(i)+" is in the range.");
		}
	}
	
	public static void knnQuery(Point point, int k, Ignite ignite) {
		
			int key=0;
			IgniteCache <String,Rectangle> cache = ignite.cache("Rectangles");
			ArrayList<String> result = new ArrayList<String>();
			while(key<qCount) {
				Rectangle rect = cache.get("Cache---"+key);
				if(rect.contains(point)) {
					result.add("Cache---"+key);
				}
				key++;
			}
		PriorityQueue<PointDistancePair> nearestPoints = new PriorityQueue<PointDistancePair>();
		//double largestDistance = 0;
		for(int i=0;i<result.size();i++) {
			IgniteCache<Integer, ArrayList<Point>> pcache = cacheMap.get(result.get(i));
			ArrayList<Point> points= pcache.get(0);
			for(Point p : points) {
				double distance = p.distanceTo(point);
				if(nearestPoints.size()<k) {
					nearestPoints.add(new PointDistancePair(p,distance));
					//largestDistance = getlargestDistance(nearestPoints, distance, largestDistance, point);
				}
				else if(distance<nearestPoints.peek().getDistance()) {
					nearestPoints.poll();
					nearestPoints.add(new PointDistancePair(p,distance));
					//removeLargestDistance(nearestPoints, point);
					//largestDistance = getlargestDistance(nearestPoints, distance, largestDistance,point);
				}
				
			}	
		}
		writeToFile(nearestPoints,"D:\\knnResults.txt");
	}
	/*
	private static double getlargestDistance(ArrayList<PointDistancePair> nearestPoints, double distance, double largestDistance, Point point) {
		if(distance <= largestDistance)
			return largestDistance;
		double furthest = -1;
		for(int i=0;i<nearestPoints.size();i++) {
			if(furthest<0) {
				furthest = nearestPoints.get(i).getDistance();
			}
			else {
				if(nearestPoints.get(i).getDistance()>furthest) {
					furthest = nearestPoints.get(i).getDistance();
				}
			}
		}
		return furthest;
	}

	private static void removeLargestDistance(ArrayList<PointDistancePair> nearestPoints, Point point) {
		// TODO Auto-generated method stub
		int furthest = -1;
		for(int i=0;i<nearestPoints.size();i++) {
			if(furthest<0) {
				furthest = i;
			}
			else {
				if(nearestPoints.get(i).getDistance()>nearestPoints.get(furthest).getDistance()) {
					furthest = i;
				}
			}
		}
		if(furthest==-1)
			return;
		else {
			nearestPoints.remove(furthest);
		}
	}
	*/
	

	public static void writeToFile(Iterable<PointDistancePair> points, String filePath) {
        try {
		OutputStreamWriter writer = new OutputStreamWriter(
				new FileOutputStream(filePath, false), "UTF-8");
		//0,74,40
		//1,75,60
		int i=0;
		for(PointDistancePair p: points) {
			writer.write(i+","+p.getPoint().x+","+p.getPoint().y+","+p.getDistance()+"\n");
			i++;
		}
		
		writer.close();
		}
        catch(Exception e) {
        	//e.printStackTrace();
        }
	}
    
	
	public static void main(String[] args) throws Exception {
        ignite = Ignition.start(ClientConfigurationFactory.createConfiguration());          
        loadFiles(ignite, "D:\\test_mbrsz7.txt");
        createCachesFromFile(ignite);  
        loadFiles(ignite,"C:\\green.txt");
        insert(ignite);
        //printCahces(ignite);
        rangeQuery(new Rectangle(-73.916015625,40.64501953125,-73.828125,40.83837890625),ignite);
        knnQuery(new Point(-73.916015625,40.64501953125),11,ignite);
        ignite.destroyCaches(ignite.cacheNames());
        System.out.println(ignite.cacheNames());
        ignite.close();
    }


}