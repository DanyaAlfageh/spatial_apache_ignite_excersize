package startup;

import config.ClientConfigurationFactory;
import model.Point;
import model.Rectangle;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import org.apache.ignite.Ignite;
import org.apache.ignite.IgniteCache;
import org.apache.ignite.Ignition;
import org.apache.ignite.cache.query.ScanQuery;
import org.apache.ignite.lang.IgniteBiPredicate;

/** This file was generated by Ignite Web Console (02/11/2021, 12:55) **/
public class ClientNodeCodeStartup {
    /**
     * Start up node with specified configuration.
     * 
     * @param args Command line arguments, none required.
     * @throws Exception If failed.
     **/
	static Rectangle spaceMbr;
	static IgniteCache<Integer, File> fcache;
	static IgniteCache<String, Rectangle> ccache;
	static Ignite ignite;
	static int i=0;
	static int key;
	
	private static File loadFiles(Ignite ignite, String path) {
		// TODO Auto-generated method stub
		fcache = ignite.getOrCreateCache("FileCache");
		File f = new File(path);
		fcache.put(key, f);
		key++;
		return fcache.get(key-1);
		
		}
	
	 static void createCachesFromFile(Ignite ignite) throws IOException {
		 BufferedReader br = new BufferedReader(new FileReader(fcache.get(0)));
		 ccache = ignite.getOrCreateCache("Rectangles");
		 String line = null;
		 while ((line = br.readLine()) != null) {
		   String[] parts = line.split(",");
		   int next = Integer.parseInt(parts[0]);
		   IgniteCache<Integer, ArrayList<Point>> pcache = ignite.getOrCreateCache("Cache---"+next);
		   ccache.put(pcache.getName(), new Rectangle(Double.parseDouble(parts[1]),Double.parseDouble(parts[2]),
				   Double.parseDouble(parts[3]),Double.parseDouble(parts[4])));
		   System.out.println(pcache.getName()+" "+ccache.get(pcache.getName()).toString());

		 }
		 br.close();
		 
	}
	@SuppressWarnings("unchecked")
	public static void insert(Ignite ignite) throws ParseException, NumberFormatException, IOException {
			// check if there is a child or not before insert
			// First case if node doesn't have child
			ArrayList<Point> p = new ArrayList<Point>();
			String cachekey;
			BufferedReader br = new BufferedReader(new FileReader(fcache.get(1)));
			String line = null;
			 while ((line = br.readLine()) != null) {
			   String[] parts = line.split(",");
			   double x = Double.parseDouble(parts[1]);
			   double y = Double.parseDouble(parts[2]);
			   Point point = new Point(x,y);
			   cachekey=getCache(point);
			   System.out.println(cachekey);

				   if(ignite.cache(cachekey).get(0)==null)
					   {
					   		p.add(point);
					   		ignite.cache(cachekey).getAndPutIfAbsent(0, p);
					   		System.out.println("Added to "+ignite.cache(cachekey).getName()
						   			+" Value"+ignite.cache(cachekey).get(0));
					   		p.clear();
					   }
				   else {
					 	p = (ArrayList<Point>) ignite.cache(cachekey).get(0);
					   	p.add(point);
					   	ignite.cache(cachekey).getAndReplace(0, p);
					   	System.out.println("Added to "+ignite.cache(cachekey).getName()
					   			+" Value"+ignite.cache(cachekey).get(0));
					   	p.clear();

			   	}
			   }
			 br.close();
			}
	
	public static String getCache(Point p) {
	    Random rand = new Random();

	    // nextInt is normally exclusive of the top value,
	    // so add 1 to make it inclusive
	    int randomNum = rand.nextInt((50 - 0) + 1) + 0;
		return "Cache---"+randomNum;
	}
	
    public static void main(String[] args) throws Exception {
        ignite = Ignition.start(ClientConfigurationFactory.createConfiguration());
        loadFiles(ignite, "D:\\test_mbrsz1.txt");
        createCachesFromFile(ignite);    
        System.out.println("File: "+fcache.get(0));
        System.out.println(ignite.cacheNames());
        loadFiles(ignite,"C:\\green.txt");
        insert(ignite);
        ignite.destroyCaches(ignite.cacheNames());
        System.out.println(ignite.cacheNames());
        ignite.close();
    }
}