package startup;

import config.ClientConfigurationFactory;
import model.Point;
import model.Rectangle;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.apache.ignite.Ignite;
import org.apache.ignite.IgniteCache;
import org.apache.ignite.IgniteCompute;
import org.apache.ignite.Ignition;
import org.apache.ignite.cache.CachePeekMode;
import org.apache.ignite.cache.query.ScanQuery;
import org.apache.ignite.lang.IgniteBiPredicate;
import org.apache.ignite.lang.IgniteRunnable;

/** This file was generated by Ignite Web Console (02/11/2021, 12:55) **/
public class ClientNodeCodeStartup {
    /**
     * Start up node with specified configuration.
     * 
     * @param args Command line arguments, none required.
     * @throws Exception If failed.
     **/
	static Rectangle spaceMbr;
	static IgniteCache<Integer, File> fcache;
	static IgniteCache<String, Rectangle> ccache;
	static Ignite ignite;
	static int qCount = 3949;
	static int i=0;
	static int key;
	private static Map <String,IgniteCache<Integer, ArrayList<Point>>> cacheMap;
	
	private static File loadFiles(Ignite ignite, String path) {
		// TODO Auto-generated method stub
        //long timeload = System.currentTimeMillis();  
		fcache = ignite.getOrCreateCache("FileCache");
		File f = new File(path);
		fcache.put(key, f);
		key++;
        //long now = System.currentTimeMillis();
		//long loadTime = now - timeload;
		//System.out.println("loading "+ path + " took "+loadTime+" milliseconds");
		return fcache.get(key-1);
		
		}
	
	 static void createCachesFromFile(Ignite ignite) throws IOException {

		 cacheMap = new HashMap <String,IgniteCache<Integer, ArrayList<Point>>>();
		 
		 BufferedReader br = new BufferedReader(new FileReader(fcache.get(0)));
		 ccache = ignite.getOrCreateCache("Rectangles");
		 String line = null;
		 while ((line = br.readLine()) != null) {
		        //long timeload2 = System.currentTimeMillis();  
		   String[] parts = line.split(",");
		   int next = Integer.parseInt(parts[0]);
		   IgniteCache<Integer, ArrayList<Point>> pcache = ignite.getOrCreateCache("Cache---"+next);
		   cacheMap.put("Cache---"+next, pcache);
		   ccache.put(pcache.getName(), new Rectangle(Double.parseDouble(parts[1]),Double.parseDouble(parts[2]),
				   Double.parseDouble(parts[3]),Double.parseDouble(parts[4])));
		   //System.out.println(pcache.getName()+" "+ccache.get(pcache.getName()).toString());
	       // long now2 = System.currentTimeMillis();
			//long loadTime2 = now2 - timeload2;
			//System.out.println("Creating a cache takes "+loadTime2+" milliseconds");
		 }
		 br.close();
	       // long now = System.currentTimeMillis();
			//long loadTime = now - timeload;
			//System.out.println("creation of caches took "+loadTime+" milliseconds");
		 
	}
	public static void insert2(Ignite ignite)throws ParseException, NumberFormatException, IOException {
		String line = null;
		for(int i=0;i<qCount;i++) {
			BufferedReader br = new BufferedReader(new FileReader(fcache.get(1)));
			Rectangle rect = ccache.get("Cache---"+i);
			ArrayList<Point> p = new ArrayList<Point>();

			 while ((line = br.readLine()) != null) {
				 //long timeload2 = System.currentTimeMillis();     
			   String[] parts = line.split(",");
			   double x = Double.parseDouble(parts[1]);
			   double y = Double.parseDouble(parts[2]);
			   Point point = new Point(x,y);
			   if(rect.contains(point)) {
				   p.add(point);
			   	}
			   }
			 ignite.cache("Cache---"+i).put(0, p);
			 //System.out.println("Cache---"+i+" has "+p.size());
			 br.close();
		}


	}
	 
	@SuppressWarnings("unchecked")
	public static void insert(Ignite ignite) throws ParseException, NumberFormatException, IOException {
			// check if there is a child or not before insert
			// First case if node doesn't have child
        	//long timeload = System.currentTimeMillis();       
			ArrayList<Point> p = new ArrayList<Point>();
			String cachekey;
			BufferedReader br = new BufferedReader(new FileReader(fcache.get(1)));
			String line = null;
			 while ((line = br.readLine()) != null) {
				 //long timeload2 = System.currentTimeMillis();     
			   String[] parts = line.split(",");
			   double x = Double.parseDouble(parts[1]);
			   double y = Double.parseDouble(parts[2]);
			   Point point = new Point(x,y);
			   cachekey=getCache(point);
				   if(ignite.cache(cachekey).get(0)==null)
					   {
					   		p.add(point);
					   		ignite.cache(cachekey).getAndPutIfAbsent(0, p);
					   		//System.out.println("Added to "+ignite.cache(cachekey).getName()
						   			//+" Value"+ignite.cache(cachekey).get(0));
					   		p.clear();
					   }
				   else {
					 	p = (ArrayList<Point>) ignite.cache(cachekey).get(0);
					   	p.add(point);
					   	ignite.cache(cachekey).getAndReplace(0, p);
					   //	System.out.println("Added to "+ignite.cache(cachekey).getName()
					   			//+" Value"+ignite.cache(cachekey).get(0));
					   	p.clear();

			   	}
				   	//long now2 = System.currentTimeMillis();
		        	//long loadTime2 = now2 - timeload2;
		        	//System.out.println("Inserting One point takes "+loadTime2+" milliseconds");
			   }
			 br.close();
	        	//long now = System.currentTimeMillis();
	        	//long loadTime = now - timeload;
	        	//System.out.println("Inserting points took "+loadTime+" milliseconds");
			}
	
	public static String getCache(Point p) throws FileNotFoundException {
		//long timeload = System.currentTimeMillis();  
		//Rectangle rect = p.getMBR();
		String name = "";
		boolean t=false;
		int i=0;
		//long timeload2 = System.currentTimeMillis();  
        while(t==false&&i<qCount) {
        	
        	Rectangle recttemp = ccache.get("Cache---"+i);
        	
        	t = recttemp.contains(p);

        	
        	if(t==false) {
        		name= "";
        		}
        	else {
        		name= "Cache---"+i;
        		t=true;
        		}
        	i++;
        }
      	//long now2 = System.currentTimeMillis();
    	//long loadTime2 = now2 - timeload2;
    	//System.out.println("Loop for an entry from rectangle cache for insert took "+loadTime2+" milliseconds");
    	
    	//long now = System.currentTimeMillis();
    	//long loadTime = now - timeload;
    	//System.out.println("Getting caches for insert took "+loadTime+" milliseconds");
	    if(name=="") 
	    	return "Cache---0";
	    else 
	    	return name;
	}
	@SuppressWarnings("unchecked")
	public static void printCahces(Ignite ignite) {
		int s=0;
		for (int key = 0; key < qCount; key++) {
			 String name = ignite.cache("Cache---"+key).getName();
			 ArrayList<Point> p = ((ArrayList<Point>) ignite.cache("Cache---"+key).get(0));
			 if(p==null)
				{//System.out.println("Cache "+name+" is Null");
			 	//System.out.println("**********************************************************");
				 }
			 else
			 {		//System.out.println("Cache: "+name+" has "+p.size()+" points. It's mbr is "+ccache.get(name));
			 		s=s+p.size();
					//for(int i=0; i<p.size();i++) {
					//	System.out.print("Rectangle is in caches: "+key+" And the rectangle is "+p.get(i));
					//}
					//System.out.println("**********************************************************");
			 } 
			 System.out.println("The Cache " + key + ", Has " +p.size()+" points");

			 
		}
		//System.out.println("Total points in cache are "+s);
		
	}
	
	public static void rangeQuery(Rectangle s, Ignite ignite) throws FileNotFoundException {
		
	    File file = new File("D:\\RangeQueryOutput.txt");
	      //Instantiating the PrintStream class
	   PrintStream stream = new PrintStream(file);

		int key=0;
		IgniteCache <String,Rectangle> cache = ignite.cache("Rectangles");
		ArrayList<String> result = new ArrayList<String>();
		boolean found=true;
		while(found&&key<qCount) {
			Rectangle rect = cache.get("Cache---"+key);
			if(rect.isIntersected(s)) {
				result.add("Cache---"+key);
				
			}
			else {
				//found=false;
			}
			key++;
		}

		ArrayList<Point> foundPoints = new ArrayList<Point>();
		for(int i=0; i<result.size();i++) {
			IgniteCache<Integer, ArrayList<Point>> pcache = cacheMap.get(result.get(i));
			ArrayList<Point> points= pcache.get(0);
			for(Point p : points) {
				if(s.contains(p)) {
					foundPoints.add(p);
				}
			}
		}
		for(int i=0; i<result.size();i++) {
			//System.out.println("From now on "+file.getAbsolutePath()+" will be your console");
		    System.setOut(stream);
			System.out.println("Caches: "+result.get(i)+" is in the range.");
		}
		for(int i=0; i<foundPoints.size();i++) {
			//System.out.println("From now on "+file.getAbsolutePath()+" will be your console");
		    //System.setOut(stream);
			System.out.println("Point: "+foundPoints.get(i)+" is in the range.");
		}
	}
	
	
	@SuppressWarnings("unchecked")
/*	public static void rangeQueryPoints(Rectangle s, Ignite ignite) {
		ArrayList<String> result = new ArrayList<String>();
		boolean t=true;
		int temp=0;
		for(int i=0;i<55;i++) {
			ArrayList<Point> p = (ArrayList<Point>) ignite.cache("Cache---"+i).get(0);
			if(p==null) {
				//System.out.println("Error at "+i);
			}
			else{
				for(int j=0;j<p.size();j++) {
					if(s.contains(p.get(j))) {
						temp++;
					}
				}
				if(temp>0)
					result.add("Cache---"+i);
			}
			
		}
		for(int i=0; i<result.size();i++) {
			System.out.println("Rectangle is in caches: "+result.get(i)+" And the rectangle is "+ccache.get(result.get(i)).toString());
		}
	}*/
	
    public static void main(String[] args) throws Exception {
        ignite = Ignition.start(ClientConfigurationFactory.createConfiguration());     
        long timeload = System.currentTimeMillis();        
        loadFiles(ignite, "D:\\test_mbrsz7.txt");
        long now = System.currentTimeMillis();
		long loadTime = now - timeload;
		//System.out.println("Loading took "+loadTime+" milliseconds");
		
        long timecreate = System.currentTimeMillis();  
        createCachesFromFile(ignite);
        long now2 = System.currentTimeMillis();
		long createtime = now2 - timecreate;
		//System.out.println("Creation took "+createtime+" milliseconds");
		
        //System.out.println("File: "+fcache.get(0));
        
        //System.out.println(ignite.cacheNames());
        
        long timeloadtest = System.currentTimeMillis();    
        loadFiles(ignite,"C:\\green.txt");
        long now3 = System.currentTimeMillis();
		long loadTimetest = now3 - timeloadtest;
		//System.out.println("loading points took "+loadTimetest+" milliseconds");
		
		long inserttime = System.currentTimeMillis();  
        //insert(ignite);
        insert2(ignite);
        long now4 = System.currentTimeMillis();
		long timeinsert = now4 - inserttime;
		System.out.println("Insertion took "+timeinsert+" milliseconds");
        
        printCahces(ignite);
        rangeQuery(new Rectangle(-73.916015625,40.64501953125,-73.828125,40.83837890625),ignite);	
        //rangeQueryPoints(new Rectangle(-73.916015625,40.64501953125,-73.828125,40.83837890625),ignite);
        ignite.destroyCaches(ignite.cacheNames());
        System.out.println(ignite.cacheNames());
        ignite.close();
    }
}